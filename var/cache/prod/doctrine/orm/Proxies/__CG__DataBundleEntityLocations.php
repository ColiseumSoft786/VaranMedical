<?php

namespace Proxies\__CG__\DataBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Locations extends \DataBundle\Entity\Locations implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'name', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'langitude', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'latitude', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'adresse', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'ville', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'codezip', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'verified', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'deletedat', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'public', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'id', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'doctor'];
        }

        return ['__isInitialized__', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'name', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'langitude', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'latitude', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'adresse', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'ville', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'codezip', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'verified', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'deletedat', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'public', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'id', '' . "\0" . 'DataBundle\\Entity\\Locations' . "\0" . 'doctor'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Locations $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setLangitude($langitude)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLangitude', [$langitude]);

        return parent::setLangitude($langitude);
    }

    /**
     * {@inheritDoc}
     */
    public function getLangitude()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLangitude', []);

        return parent::getLangitude();
    }

    /**
     * {@inheritDoc}
     */
    public function setLatitude($latitude)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLatitude', [$latitude]);

        return parent::setLatitude($latitude);
    }

    /**
     * {@inheritDoc}
     */
    public function getLatitude()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLatitude', []);

        return parent::getLatitude();
    }

    /**
     * {@inheritDoc}
     */
    public function setAdresse($adresse)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAdresse', [$adresse]);

        return parent::setAdresse($adresse);
    }

    /**
     * {@inheritDoc}
     */
    public function getAdresse()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAdresse', []);

        return parent::getAdresse();
    }

    /**
     * {@inheritDoc}
     */
    public function setVille($ville)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVille', [$ville]);

        return parent::setVille($ville);
    }

    /**
     * {@inheritDoc}
     */
    public function getVille()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVille', []);

        return parent::getVille();
    }

    /**
     * {@inheritDoc}
     */
    public function setCodezip($codezip)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCodezip', [$codezip]);

        return parent::setCodezip($codezip);
    }

    /**
     * {@inheritDoc}
     */
    public function getCodezip()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCodezip', []);

        return parent::getCodezip();
    }

    /**
     * {@inheritDoc}
     */
    public function setVerified($verified)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVerified', [$verified]);

        return parent::setVerified($verified);
    }

    /**
     * {@inheritDoc}
     */
    public function getVerified()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVerified', []);

        return parent::getVerified();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeletedat($deletedat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeletedat', [$deletedat]);

        return parent::setDeletedat($deletedat);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeletedat()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeletedat', []);

        return parent::getDeletedat();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublic($public)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublic', [$public]);

        return parent::setPublic($public);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublic()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublic', []);

        return parent::getPublic();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDoctor(\DataBundle\Entity\Doctors $doctor = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDoctor', [$doctor]);

        return parent::setDoctor($doctor);
    }

    /**
     * {@inheritDoc}
     */
    public function getDoctor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDoctor', []);

        return parent::getDoctor();
    }

}
